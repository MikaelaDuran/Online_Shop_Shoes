drop database if exists Online_Shop;
create database Online_Shop;
use Online_Shop;

create table Category(
id int not null auto_increment primary key,
type varchar (40) not null
);

create table Product(
id int not null auto_increment primary key,
name varchar (40) not null,
brand varchar (40) not null,
price int not null
);

-- index tabel, Användare kunna söka efter märke för att man brukar söka efter märke eller produktnamn när man handlar online.
create index IDX_Product_Brand on product (brand);

create table Category_Product_Mapping(
id int not null auto_increment primary key,
productID int not null,
categoryID int not null,
foreign key (productID) references Product(id) on delete cascade,
foreign key (categoryID) references Category(id) on delete cascade
);

create table Item(
id int not null auto_increment primary key,
productID int not null,
colour varchar(40) not null,
size int not null,
stock int not null,
foreign key (productID) references Product(id) on delete cascade -- om produkt tas bort, ska alla artiklar av produkt tas bort. item är svag entitet till produkt
);

-- index tabel så att användaren kan söka efter storlek
create index IDX_Item_size on item (size);

create table Customer(
id int not null auto_increment primary key,
firstname varchar(40) not null,
lastName varchar(40) not null,
district varchar(40) not null,
address varchar (40) not null
);

create table Orders(
id int not null auto_increment primary key,
customerID int null,
orderDate date null,
updatedOrder timestamp default current_timestamp,
orderStatus varchar(30) default null,
foreign key (customerID) references Customer(id) on delete set null -- om kund info tas bort, vill vi fortfarande spara beställningshistorik
);

create table Order_Item(
id int not null auto_increment primary key,
orderID int not null,
itemID int null,
quantity int not null,
foreign key (orderID) references Orders(id) on delete cascade, -- om beställning tas bort, alla artiklar i beställning behöver tas bort
foreign key (itemID) references Item(id) on delete set null -- spara historik för order
);

insert into category (type)
values ('sport'), ('running'), ('women'), ('men'), ('walking'), ('kids');


insert into product (name, brand, price)
values ('air jordan', 'nike', 1799), ('bondi8', 'hoka', 1999), ('990', 'new balance', 2299),
('samba', 'adidas', 799), ('old school', 'vans', 599), ('alphafly3', 'nike', 3899),
('clog', 'crocs', 299), ('iggesund', 'kavat',1000);

insert into Category_Product_Mapping (productId,categoryId)
values (1,1), (1,4), (2,1), (2,2), (2,3), (2,4), (3,3), (3,4), (4,4), (4,5),
(5,3), (5,5), (6,1), (6,2), (6,4), (7,3), (7,4), (7,6), (8,5), (8,6);

insert into Customer (firstName, lastName, district, address)
values ('Hyoju', 'Ha', 'Sundbyberg', 'Hamngatan31'),
('Henrik', 'Ek', 'Bromma', 'Magnusvägen1'),
('Mikaela' , 'Duran', 'Haninge', 'Nynäsvägen50'),
('Erik','Svensson','Stockholm','Hamngatan31'),
('Ali','Mahmod','Stockholm','Kungsgatan15'),
('Peter','Ericsson','Bromma','Odengatan10'),
('Maria','Lopez','Huddinge','Ringvägen12'),
('Sven','Karlsson','Huddinge','Malmvägen20');

insert into item (productId, colour, size, stock)
values (1,'black',41,1), (1,'black',42,15), (1,'black',43,10), (1,'black',44,5), (1,'white',41,16),
(1,'white',42,12), (1,'white',43,7), (1,'white',44,3), (2,'red',38,2), (2,'red',39,5), (2,'red',40,5),
(2,'red',41,5), (2,'red',42,10), (3,'gray',37,20), (3,'gray',38,22), (3,'gray',39,14), (3,'gray',40,20),
(4,'blue',41,10), (4,'blue',42,10), (4,'blue',43,10), (4,'blue',44,10), (5,'blue',37,5), (5,'blue',38,5),
(5,'blue',39,5), (6,'red',40,3), (6,'red',41,3), (6,'red',42,3), (6,'red',43,1), (6,'red',44,3),
(7,'white',20,15), (7,'white',21,15), (7,'white',22,15), (7,'white',23,8), (7,'white',36,22),
(7,'white',37,20), (7,'white',38,6), (7,'black',42,17), (7,'black',42,3), (8,'blue',23,5),
(8,'blue',24,5), (8,'blue',25,5), (8,'blue',26,5), (8,'blue',27,5);

insert into Orders(customerID, orderDate, orderStatus)
values (1, '2024-12-11', 'paid'), (2, '2025-01-10', 'paid'), (2, '2025-01-11', 'paid'),
(3, '2024-11-30', 'paid'), (5, '2024-12-20', 'active'), (4, '2025-01-03','active'),
(8, '2024-12-10','active'), (7, '2024-11-03','active'), (6, '2024-12-18','active');

insert into Order_Item(orderID, itemID, quantity)
values (1,30,2), (2,3,1), (2,7,1), (3,5,1), (3,18,2),
(4,6,2), (4,2,1), (5,10,2), (5,16,1), (6,1,1), (6,5,1),
(6,6,2), (6,8,1), (7,29,1), (7,21,1), (7,4,2), (8,40,1),
(8,23,1), (9,15,1), (9,43,5);

-- add userName, password in customer table
alter table customer
add userName varchar(30) unique,
add password varchar(30);

update customer set userName = 'hyha', password = '111' where id = 1;
update customer set userName = 'heek', password = '222' where id = 2;
update customer set userName = 'midu', password = '333' where id = 3;
update customer set userName = 'ersv', password = '444' where id = 4;
update customer set userName = 'alma', password = '555' where id = 5;
update customer set userName = 'peer', password = '666' where id = 6;
update customer set userName = 'malo', password = '777' where id = 7;
update customer set userName = 'svka', password = '888' where id = 8;







DROP PROCEDURE IF EXISTS AddToCart;

DELIMITER //
CREATE PROCEDURE AddToCart(IN kundid INT, IN OrderID INT,  IN produktid INT,  IN itemID INT)
BEGIN
    DECLARE tempOrderID INT;

    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL SET MESSAGE_TEXT = 'Ett oväntat fel inträffade';
    END;

      DECLARE CONTINUE HANDLER FOR SQLWARNING
    BEGIN
        ROLLBACK;
        RESIGNAL SET MESSAGE_TEXT = 'Ett oväntat fel inträffade';
    END;

    START TRANSACTION;

	-- Nytt orderId om den är null
    IF OrderID IS NULL THEN
        INSERT INTO Orders (customerId, orderDate, updatedOrder, orderStatus)
        VALUES (kundid, NOW(), NOW(), 'active');

        SET tempOrderID = LAST_INSERT_ID();
    ELSE
        SET tempOrderID = OrderID;
    END IF;

      -- Kontrollerar om produkten redan finns i Order_Item
    IF EXISTS (
        SELECT * FROM Order_Item
        WHERE orderId = tempOrderID AND itemId = itemID
    ) THEN
        -- Om produkten redan finns, öka Order quantity med 1
        UPDATE Order_Item SET quantity = quantity + 1
        WHERE orderId = tempOrderID AND itemId = itemID;

    ELSE
        -- Om produkten inte finns, lägg till en ny rad
        INSERT INTO Order_Item(orderId, itemId, quantity)
        VALUES (tempOrderID, itemID, 1);
    END IF;

	-- Minska lagersaldo med 1
    UPDATE Item SET stock = stock - 1 WHERE id = itemID AND stock > 0;

    COMMIT;
END //
DELIMITER ;

SELECT orders.id AS OrderID, customer.firstname AS Customer, product.name AS Product,
item.size AS Size, item.colour AS Colour ,orders.orderStatus AS Status, item.id AS ItemID,
order_item.quantity AS Quantity FROM product
INNER JOIN item ON product.id = item.productID
INNER JOIN order_item ON item.id = order_item.itemID
INNER JOIN orders ON orders.id = order_item.orderID
INNER JOIN customer ON customer.id = orders.customerID;


Select * from Item;

SELECT * FROM CUSTOMER;

DROP VIEW IF EXISTS CartView;
CREATE VIEW CartView AS
SELECT orders.id AS OrderID,  customer.id AS CustomerId, customer.firstname AS Customer,
product.name AS Product, item.size AS Size, item.colour AS Colour,
orders.orderStatus AS Status, item.id AS ItemID, order_item.quantity AS Quantity
FROM orders
INNER JOIN customer ON customer.id = orders.customerID
INNER JOIN order_item ON orders.id = order_item.orderID
INNER JOIN item ON order_item.itemID = item.id
INNER JOIN product ON item.productID = product.id
WHERE orders.orderStatus = 'active';


SELECT * FROM CartView WHERE CustomerId = 5;

DROP PROCEDURE IF EXISTS PAY
DELIMITER //
CREATE PROCEDURE PAY(IN kundid INT, IN orderID INT)
BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        RESIGNAL SET MESSAGE_TEXT = 'Ett oväntat fel inträffade';
    END;

    START TRANSACTION;

    -- Uppdaterar orderstatus till "paid"
    UPDATE orders SET orderStatus = 'paid' WHERE id = orderID AND customerID = kundid;

    COMMIT;
END //
DELIMITER ;

Select * from orders;

CREATE TABLE OutOfStock (
    id INT AUTO_INCREMENT PRIMARY KEY,productID INT NOT NULL, itemID INT NOT NULL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (productID) REFERENCES Product(id),
    FOREIGN KEY (itemID) REFERENCES Item(id)
);
DROP TRIGGER IF EXISTS OutOfStock;

DELIMITER //
CREATE TRIGGER OutOfStock AFTER UPDATE ON Item
FOR EACH ROW
BEGIN
    -- Kontroll ifall stock blev 0
    IF NEW.stock = 0 THEN
        INSERT INTO OutOfStock (productID, itemID, timestamp)
        VALUES (OLD.productID, OLD.id, NOW());
    END IF;
END;
//
DELIMITER ;

SELECT * FROM OutOfStock;